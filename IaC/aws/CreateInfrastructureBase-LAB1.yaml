AWSTemplateFormatVersion: "2010-09-09"
Description: Create Infrastructure for LAB1-asf

Parameters:
  AMIVersionRedHat9:
    Type: String
    Default: "ami-0fe630eb857a6ec83"
  AMIVersionUbuntu20:
    Type: String
    Default: "ami-06aa3f7caf3a30282"


Resources:
  CMKMaster:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIVersionRedHat9
      InstanceType: t2.micro
      KeyName: lab1-ssh-hmg
      IamInstanceProfile: EC2-SSM-Role
      SubnetId: subnet-06ab5911aacc1f1fa
      Tags:
        - Key: Name
          Value: "CMKMaster" 
      UserData:
        Fn::Base64: 
          Fn::Sub: |
            #!/bin/bash
            yum update -y
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            systemctl enable amazon-ssm-agent
  MariadbNode1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIVersionUbuntu20
      InstanceType: t2.micro
      KeyName: lab1-ssh-hmg
      IamInstanceProfile: EC2-SSM-Role
      SubnetId: subnet-06ab5911aacc1f1fa       
      Tags:
        - Key: Name
          Value: "Mariadb-Node1" 
      UserData:
        Fn::Base64: 
          Fn::Sub: |
            #!/bin/bash
            apt update -y
            apt install mariadb-server -y
  K8Scp:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIVersionUbuntu20
      InstanceType: t2.medium
      KeyName: lab1-ssh-hmg
      IamInstanceProfile: EC2-SSM-Role
      NetworkInterfaces: 
          - AssociatePublicIpAddress: "true"
            DeleteOnTermination: "true"
            DeviceIndex: "0"
            SubnetId: subnet-06ab5911aacc1f1fa
      Tags:
        - Key: Name
          Value: "K8Scp"
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            apt update -y
            cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
            overlay
            br_netfilter
            EOF
            modprobe overlay
            modprobe br_netfilter
            cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
            net.bridge.bridge-nf-call-iptables  = 1
            net.bridge.bridge-nf-call-ip6tables = 1
            net.ipv4.ip_forward                 = 1
            EOF
            sysctl --system
            apt-get install -y apt-transport-https curl
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
            apt-get update
            apt-get install -y kubelet kubeadm kubectl
            apt-mark hold kubelet kubeadm kubectl
            apt-get update && apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update && sudo apt-get install -y containerd.io
            sudo containerd config default | sudo tee /etc/containerd/config.toml
            sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
            systemctl restart containerd
            systemctl status containerd
            systemctl enable --now kubelet
